name: Build, Test, and Publish .NET Core and React App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Build and Capture Logs for WebApiServer
      run: dotnet build --no-incremental -warnaserror WebApiServer/WebApiServer.csproj > webapi_build.log 2>&1

    - name: .NET Lint Log
      run: |
        # .NET build logs
        grep "warning" ./webapi_build.log | while read -r line; do
          echo "::warning title=.NET Lint::$line"
        done

        grep "error" ./webapi_build.log | while read -r line; do
          echo "::error title=.NET Lint::$line"
        done

    - name: Install dependencies for React
      run: npm install
      working-directory: ./clientapp

    - name: Run npm lint and capture logs
      run: |
        cd clientapp
        npm run lint > npm_lint.log 2>&1
        cat npm_lint.log  # This will print the logs in the job output
        if grep -q "error" npm_lint.log; then exit 1; fi  # This ensures the job fails if there are errors
      continue-on-error: true

    - name: Annotate npm lint warnings and errors
      run: |
        # Annotate warnings from npm lint
        grep -i 'warning' clientapp/npm_lint.log | while read -r line; do
            echo "::warning title=NPM Lint::$line"
        done

        # Annotate errors from npm lint
        grep -i 'error' clientapp/npm_lint.log | while read -r line; do
            echo "::error title=NPM Lint::$line"
        done
      continue-on-error: true
        
    #    - name: Run npm lint
    #      run: |
    #        cd clientapp
    #        npm run lint > npm_lint.log 2>&1
    #
    #    - name: Annotate npm lint warnings and errors
    #      run: |
    #        # Annotate warnings from npm lint
    #        grep -i 'warning' clientapp/npm_lint.log | while read -r line; do
    #          echo "::warning title=NPM Lint::$line"
    #        done
    #
    #        # Annotate errors from npm lint
    #        grep -i 'error' clientapp/npm_lint.log | while read -r line; do
    #          echo "::error title=NPM Lint::$line"
    #        done
        
    #    - name: Display npm lint logs
    #      run: |
    #        echo "==== NPM LINT LOG ===="
    #        cat clientapp/npm_lint.log
        
    - name: Build npm package and capture logs
      id: npm-build
      run: |
        echo "Starting npm build..."
        npm run build > npm_build.log 2>&1
      working-directory: ./clientapp

    #    - name: Test the project and capture logs
    #      run: dotnet test -c Release --verbosity normal WebApiServer/WebApiServer.csproj > test.log 2>&1
    #
    #    - name: Annotate .NET Test log
    #      run: |
    #        grep "warning" test.log | while read -r line; do
    #          echo "::warning title=.NET Test::$line"
    #        done
    #
    #        grep "error" test.log | while read -r line; do
    #          echo "::error title=.NET Test::$line"
    #        done


    - name: Enable .NET problem matcher
      run: echo "::add-matcher::$(dirname $(which dotnet))/../sdk/*/DotnetSdk.matchers.json"

    - name: Run .NET Tests
      run: dotnet test --verbosity normal WebApiServer/WebApiServer.csproj > test.log 2>&1
      continue-on-error: true

    - name: Annotate Warnings and Errors
      run: |
        grep "warning" test.log | while read -r line; do
          echo "::warning title=.NET Test::$line"
        done

        grep "error" test.log | while read -r line; do
          echo "::error title=.NET Test::$line"
        done
      continue-on-error: true

    - name: Enhanced Test Annotations
      run: |
        grep -i "Failed" test.log | while read -r line; do
          # Extract file and line number if available
          FILE=$(echo "$line" | grep -o "at .*\.cs" | awk '{print $2}')
          LINE=$(echo "$line" | grep -o "line [0-9]*" | awk '{print $2}')
          if [[ -n "$FILE" && -n "$LINE" ]]; then
            echo "::error file=$FILE,line=$LINE::${line}"
          else
            echo "::error title=.NET Test::$line"
          fi
        done
      continue-on-error: true

    - name: Upload test log
      uses: actions/upload-artifact@v3
      with:
         name: dotnet-test-log
         path: test.log

    - name: Publish the project and capture logs
      run: dotnet publish WebApiServer/WebApiServer.csproj -c Release -o ./dotnet_publish -p:Version="${{ github.sha }}" > publish.log 2>&1

    - name: Annotate .NET Publish log
      run: |
        grep "warning" publish.log | while read -r line; do
          echo "::warning::$line"
        done
    
        grep "error" publish.log | while read -r line; do
          echo "::error::$line"
        done

    - name: Annotate npm run log
      run: |
        # npm build warnings
        grep -i "warning" clientapp/npm_build.log | while read -r line; do
          echo "::warning file=${{ github.workspace }}/clientapp/npm-build.log::$line"
        done

        # npm build errors
        grep -i "error" clientapp/npm_build.log | while read -r line; do
          echo "::error file=${{ github.workspace }}/clientapp/npm-build.log::$line"
        done
      continue-on-error: true
